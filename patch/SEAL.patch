diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0039517..17ac79f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -223,7 +223,7 @@ if(SEAL_USE_INTEL_HEXL)
         message(STATUS "Intel HEXL: download ...")
         seal_fetch_thirdparty_content(ExternalIntelHEXL)
     else()
-        find_package(HEXL 1.2.4)
+        find_package(HEXL 1.2.2)
         if (NOT TARGET HEXL::hexl)
             message(FATAL_ERROR "Intel HEXL: not found")
         endif()
@@ -418,7 +418,7 @@ if(NOT BUILD_SHARED_LIBS)
             add_dependencies(seal HEXL::hexl)
             target_include_directories(seal PRIVATE
                 $<BUILD_INTERFACE:$<TARGET_PROPERTY:HEXL::hexl,INTERFACE_INCLUDE_DIRECTORIES>>)
-            target_compile_options(seal PRIVATE $<TARGET_PROPERTY:HEXL::hexl,INTERFACE_COMPILE_OPTIONS>)
+            #target_compile_options(seal PRIVATE $<TARGET_PROPERTY:HEXL::hexl,INTERFACE_COMPILE_OPTIONS>)
             get_target_property(HEXL_INTERFACE_LINK_OPTIONS HEXL::hexl INTERFACE_LINK_OPTIONS)
             if (NOT "${HEXL_INTERFACE_LINK_OPTIONS}" STREQUAL "HEXL_INTERFACE_LINK_OPTIONS-NOTFOUND")
                 target_link_libraries(seal INTERFACE ${HEXL_INTERFACE_LINK_OPTIONS})

diff --git a/native/src/seal/context.cpp b/native/src/seal/context.cpp
index c14b2b9..6cb9307 100644
--- a/native/src/seal/context.cpp
+++ b/native/src/seal/context.cpp
@@ -477,7 +477,7 @@ namespace seal
         // more than one modulus in coeff_modulus. This is equivalent to expanding
         // the chain by one step. Otherwise, we set first_parms_id_ to equal
         // key_parms_id_.
-        if (!context_data_map_.at(key_parms_id_)->qualifiers_.parameters_set() || parms.coeff_modulus().size() == 1)
+        if (true) // Cheetah: No special primes!
         {
             first_parms_id_ = key_parms_id_;
         }

diff --git a/native/src/seal/util/rns.cpp b/native/src/seal/util/rns.cpp
index 35e72ff..77e9acd 100644
--- a/native/src/seal/util/rns.cpp
+++ b/native/src/seal/util/rns.cpp
@@ -1039,12 +1039,13 @@ namespace seal

         void RNSTool::decrypt_scale_and_round(ConstRNSIter input, CoeffIter destination, MemoryPoolHandle pool) const
         {
+            size_t n = input.poly_modulus_degree();
 #ifdef SEAL_DEBUG
             if (input == nullptr)
             {
                 throw invalid_argument("input cannot be null");
             }
-            if (input.poly_modulus_degree() != coeff_count_)
+            if (n > coeff_count_)
             {
                 throw invalid_argument("input is not valid for encryption parameters");
             }
@@ -1061,13 +1062,13 @@ namespace seal
             size_t base_t_gamma_size = base_t_gamma_->size();

             // Compute |gamma * t|_qi * ct(s)
-            SEAL_ALLOCATE_GET_RNS_ITER(temp, coeff_count_, base_q_size, pool);
+            SEAL_ALLOCATE_GET_RNS_ITER(temp, n, base_q_size, pool);
             SEAL_ITERATE(iter(input, prod_t_gamma_mod_q_, base_q_->base(), temp), base_q_size, [&](auto I) {
-                multiply_poly_scalar_coeffmod(get<0>(I), coeff_count_, get<1>(I), get<2>(I), get<3>(I));
+                multiply_poly_scalar_coeffmod(get<0>(I), n, get<1>(I), get<2>(I), get<3>(I));
             });

             // Make another temp destination to get the poly in mod {t, gamma}
-            SEAL_ALLOCATE_GET_RNS_ITER(temp_t_gamma, coeff_count_, base_t_gamma_size, pool);
+            SEAL_ALLOCATE_GET_RNS_ITER(temp_t_gamma, n, base_t_gamma_size, pool);

             // Convert from q to {t, gamma}
             base_q_to_t_gamma_conv_->fast_convert_array(temp, temp_t_gamma, pool);
@@ -1075,9 +1076,7 @@ namespace seal
             // Multiply by -prod(q)^(-1) mod {t, gamma}
             SEAL_ITERATE(
                 iter(temp_t_gamma, neg_inv_q_mod_t_gamma_, base_t_gamma_->base(), temp_t_gamma), base_t_gamma_size,
-                [&](auto I) {
-                    multiply_poly_scalar_coeffmod(get<0>(I), coeff_count_, get<1>(I), get<2>(I), get<3>(I));
-                });
+                [&](auto I) { multiply_poly_scalar_coeffmod(get<0>(I), n, get<1>(I), get<2>(I), get<3>(I)); });

             // Need to correct values in temp_t_gamma (gamma component only) which are
             // larger than floor(gamma/2)
@@ -1085,7 +1084,7 @@ namespace seal

             // Now compute the subtraction to remove error and perform final multiplication by
             // gamma inverse mod t
-            SEAL_ITERATE(iter(temp_t_gamma[0], temp_t_gamma[1], destination), coeff_count_, [&](auto I) {
+            SEAL_ITERATE(iter(temp_t_gamma[0], temp_t_gamma[1], destination), n, [&](auto I) {
                 // Need correction because of centered mod
                 if (get<1>(I) > gamma_div_2)
                 {
